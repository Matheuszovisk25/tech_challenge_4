import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
from api_key import NEWS_API_KEY
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
import joblib
from datetime import datetime
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.arima.model import ARIMA
import numpy as np


def obter_preco_atual():
    url = "https://www.google.com/search?q=cota%C3%A7%C3%A3o+petroleo+brent"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"}
    requisicao = requests.get(url, headers=headers)
    site = BeautifulSoup(requisicao.text, "html.parser")
    cot  = site.find("span", class_="NprOob")
    return cot.get_text()

def carregar_dados(caminho_arquivo):
    dados = pd.read_excel(caminho_arquivo, sheet_name='Planilha1')
    dados = dados.loc[:, ~dados.columns.duplicated()]
    if 'Pre√ßo - petr√≥leo bruto - Brent (FOB)' in dados.columns:
        dados = dados.rename(columns={'Pre√ßo - petr√≥leo bruto - Brent (FOB)': 'Preco_petroleo_bruto_Brent_FOB'})
    dados['Data'] = pd.to_datetime(dados['Data'], errors='coerce')
    dados['Preco_petroleo_bruto_Brent_FOB'] = pd.to_numeric(dados['Preco_petroleo_bruto_Brent_FOB'], errors='coerce')
    dados = dados.dropna(subset=['Data', 'Preco_petroleo_bruto_Brent_FOB'])
    return dados

def buscar_noticias(api_key, query='petr√≥leo', language='pt'):
    url = f'https://newsapi.org/v2/everything?q={query}&language={language}&apiKey={api_key}'
    response = requests.get(url)
    if response.status_code == 200:
        artigos = response.json().get('articles')
        artigos_filtrados = [
            artigo for artigo in artigos 
            if ('petr√≥leo' in artigo['title'].lower() if artigo['title'] else False) or 
               ('petr√≥leo' in artigo['description'].lower() if artigo['description'] else False)
        ]
        return artigos_filtrados
    else:
        return None

#------------------------------------------------------INTRODU√á√ÉO--------------------------------------------------------------------------

def introducao(dados):
    st.title("An√°lise do Pre√ßo do Petr√≥leo Brent")
    st.markdown("""
    <div style= padding: 15px; ">
        <h2 style="text-align: center;">Introdu√ß√£o</h2>
        <p style="text-align: justify;">
            O petr√≥leo √© uma das commodities mais importantes do mundo, desempenhando um papel crucial na economia global. Ele √© essencial n√£o apenas como fonte de energia, mas tamb√©m como mat√©ria-prima para uma vasta gama de produtos, desde pl√°sticos at√© produtos qu√≠micos. A produ√ß√£o de petr√≥leo √©, portanto, um indicador vital de poder econ√¥mico e estabilidade para muitos pa√≠ses.
        </p>
        <p style="text-align: justify;">
            A extra√ß√£o do petr√≥leo envolve uma t√©cnica de detona√ß√£o de rochas com uma carga explosiva a uma profundidade espec√≠fica, afim de identificar potencial reservas. Com essa mat√©ria-prima, √© poss√≠vel produzir diversos produtos essenciais como:
        </p>
        <ul>
            <li>‚õΩ Combust√≠vel: gasolina, diesel e querosene</li>
            <li>üõ¢Ô∏è Lubrificante: √≥leo e graxas</li>
            <li>üèóÔ∏è Materiais: pl√°sticos, asfalto e fibras sint√©ticas</li>
            <li>üß™ Produtos Qu√≠micos: solventes e fertilizantes</li>
        </ul>
        <p style="text-align: justify;">
            Para poder medir a quantidade de extra√ß√£o dessa material √© utilizada uma medida comumente usada na ind√∫stria petrol√≠fera para quantificar o volume de petr√≥leo bruto, sendo essa unidade chamada que "barril de petr√≥leo" que equivale a 159 litros. Contudo a convers√£o exata de 1 barril √© de 42 gal√µes americanos que √© exatamente 3,78541 litros. Portanto o c√°lculo √© exatamente 42 gal√µes americanos x 3,78541 litros = gal√£o 159 litros.
        </p>
        <p style="text-align: justify;">
            Para promover a elabora√ß√£o de pol√≠ticas s√≥lidas, mercados eficientes e a compreens√£o p√∫blica da energia e da sua intera√ß√£o com a economia e o ambiente, a institui√ß√£o "EIA.gov" recolhe, analisa e divulga informa√ß√µes energ√©ticas e disponibiliza em seu site com ampla gama de informa√ß√µes como produ√ß√£o de energia, estoques, demanda, importa√ß√µes, exporta√ß√µes e pre√ßos que √© o assunto principal da nossa consultoria.
        </p>
        <p style="text-align: justify;">
            Nosso dashboard √© interativo com insights relevantes para colaborar na tomada de decis√£o com a an√°lise do pre√ßo do petr√≥leo Brent, al√©m de nosso modelo de Machine Learning com o Forecasting dos custos com base no hist√≥rico de pre√ßos apresentado no site EIA.gov "Energy Information Administration.
        </p>
        <p style="text-align: justify;">
            Para facilitar a compreens√£o da nossa consultoria, apresentamos os momentos das crises econ√¥micas e as demandas globais do petr√≥leo que diretamente influenciam na alta e baixa dos custos referente ao barril.
        </p>
    </div>
    """, unsafe_allow_html=True)

    preco_atual = obter_preco_atual()
    st.metric("Pre√ßo Atual do Petr√≥leo Brent (USD)", preco_atual)

    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados['Data'], y=dados['Preco_petroleo_bruto_Brent_FOB'], mode='lines', name='Pre√ßo do Brent (FOB)', line=dict(color='blue')))

    eventos = [
        {'data': '1990-08-02', 'evento': 'Guerra do Golfo', 'cor': 'red'},
        {'data': '2008-09-15', 'evento': 'Crise do Subprime', 'cor': 'orange'},
        {'data': '2010-12-17', 'evento': 'Primavera √Årabe', 'cor': 'green'},
        {'data': '2020-03-11', 'evento': 'Pandemia de COVID-19', 'cor': 'purple'}
    ]

    for evento in eventos:
        fig.add_shape(
            type="line",
            x0=evento['data'], y0=dados['Preco_petroleo_bruto_Brent_FOB'].min(),
            x1=evento['data'], y1=dados['Preco_petroleo_bruto_Brent_FOB'].max(),
            line=dict(color=evento['cor'], width=2, dash="dash")
        )
        fig.add_annotation(
            x=evento['data'], y=dados['Preco_petroleo_bruto_Brent_FOB'].max(),
            ax=0, ay=-30,
            text=evento['evento'], showarrow=True, arrowhead=2,
            arrowcolor=evento['cor'], arrowsize=1, arrowwidth=2,
            font=dict(color=evento['cor'], size=12),
            textangle=-45
        )

    for evento in eventos:
        fig.add_trace(go.Scatter(
            x=[None], y=[None],
            mode='lines',
            line=dict(color=evento['cor'], dash='dash'),
            showlegend=True,
            name=evento['evento']
        ))

    fig.update_layout(
        title='Evolu√ß√£o dos Pre√ßos do Petr√≥leo',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (USD)',
        height=600,
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.3,
            xanchor="center",
            x=0.5
        ),
        margin=dict(b=100) 
    )

    st.plotly_chart(fig)

#------------------------------------------------------FIM INTRODU√á√ÉO--------------------------------------------------------------------------


#------------------------------------------------------CONCLUS√ÉO--------------------------------------------------------------------------

def conclusao():
    st.title("Conclus√£o")
    st.markdown("""
<h2>Conclus√£o</h2>
<p style="text-align: justify;">
Neste trabalho, desenvolvemos uma an√°lise abrangente do pre√ßo do petr√≥leo Brent, utilizando diversas t√©cnicas e abordagens para fornecer insights valiosos sobre a din√¢mica do mercado de petr√≥leo. Utilizamos dados hist√≥ricos para entender as tend√™ncias passadas e identificar eventos significativos que influenciaram os pre√ßos, como a pandemia de COVID-19, conflitos geopol√≠ticos e crises financeiras.
</p>
<p style="text-align: justify;">
Empregamos t√©cnicas de web scraping para coletar os dados mais recentes do pre√ßo atual do petr√≥leo Brent, permitindo uma compara√ß√£o em tempo real com as previs√µes geradas por nosso modelo de machine learning. Essa abordagem nos permitiu avaliar a precis√£o de nossas previs√µes e ajustar nossos modelos conforme necess√°rio.
</p>
<p style="text-align: justify;">
Embora tenhamos encontrado desafios t√©cnicos, como problemas de compatibilidade entre a biblioteca Prophet e NumPy, conseguimos documentar nossas an√°lises e previs√µes no notebook anexado. Este notebook est√° dispon√≠vel para download e cont√©m todas as etapas e resultados detalhados de nossa an√°lise com o Prophet.
</p>
<p style="text-align: justify;">
A combina√ß√£o de dados hist√≥ricos, pre√ßos atuais e previs√µes futuras nos forneceu uma vis√£o abrangente do mercado de petr√≥leo, permitindo a elabora√ß√£o de estrat√©gias mais informadas e a mitiga√ß√£o de riscos.
</p>
<p style="text-align: justify;">
Agradecemos pela aten√ß√£o e esperamos que as informa√ß√µes e an√°lises apresentadas sejam √∫teis para seus objetivos. Se houver d√∫vidas ou sugest√µes, estamos √† disposi√ß√£o para ajudar.
</p>
<p style="text-align: center;">
Voc√™ pode acessar nosso <a href="https://github.com/seu-usuario" target="_blank">GitHub</a> e nosso <a href="https://www.linkedin.com/in/seu-usuario" target="_blank">LinkedIn</a> para mais informa√ß√µes e contato.
</p>
""", unsafe_allow_html=True)

 #------------------------------------------------------FIM CONCLUS√ÉO--------------------------------------------------------------------------   

def exibir(dados):
    st.title("An√°lise do Pre√ßo do Petr√≥leo Brent")

    submenu = option_menu(
        menu_title="",  
        options=["Dados Brutos", "Pre√ßo ao Longo do Tempo", "Estat√≠sticas Descritivas", "An√°lise de Tend√™ncias", "GeoPlot"],
        icons=["table", "line-chart", "bar-chart", "trend-up"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal"
    )

    if submenu == "Dados Brutos":
        st.subheader("Dados Brutos")
        st.write("Visualize os dados brutos do pre√ßo do petr√≥leo Brent.")
        st.write(dados)

    elif submenu == "Pre√ßo ao Longo do Tempo":
        st.subheader("Pre√ßo do Petr√≥leo Brent ao Longo do Tempo")
        st.write("Selecione um intervalo de datas para visualizar a evolu√ß√£o do pre√ßo do petr√≥leo Brent.")
        data_min = dados['Data'].min().date()
        data_max = dados['Data'].max().date()

        data_inicio, data_fim = st.slider("Selecione o intervalo de datas", min_value=data_min, max_value=data_max, value=(data_min, data_max), format="DD/MM/YYYY")

        if data_inicio > data_fim:
            st.error("Data de in√≠cio n√£o pode ser maior que a data de fim.")
        else:
            dados_filtrados = plotar_evolucao_preco_interativo(dados, data_inicio, data_fim)

            csv = dados_filtrados.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="Baixar dados como CSV",
                data=csv,
                file_name='preco_petroleo_brent_filtrado.csv',
                mime='text/csv',
            )

    elif submenu == "Estat√≠sticas Descritivas":
        st.subheader("Estat√≠sticas Descritivas")
        st.write("Veja as estat√≠sticas descritivas dos pre√ßos do petr√≥leo Brent.")
        st.write(dados.describe())

        st.subheader("Valores Importantes")
        estatisticas = {
            "Menor Valor": dados['Preco_petroleo_bruto_Brent_FOB'].min(),
            "Maior Valor": dados['Preco_petroleo_bruto_Brent_FOB'].max(),
            "M√©dia": dados['Preco_petroleo_bruto_Brent_FOB'].mean(),
            "Mediana": dados['Preco_petroleo_bruto_Brent_FOB'].median(),
            "Desvio Padr√£o": dados['Preco_petroleo_bruto_Brent_FOB'].std()
        }
        st.write(pd.DataFrame(estatisticas, index=[0]))

    elif submenu == "An√°lise de Tend√™ncias":
        st.write("Explore as tend√™ncias nos pre√ßos do petr√≥leo Brent.")
        plotar_analise_tendencias(dados)
    
    elif submenu == "GeoPlot":
        geoplot_submenu = option_menu(
            menu_title="GeoPlot",  
            options=["Produ√ß√£o", "Exporta√ß√£o", "Consumo"],
            icons=["globe", "arrow-up", "arrow-down"],
            menu_icon="map",
            default_index=0,
            orientation="horizontal"
        )
        
        if geoplot_submenu == "Produ√ß√£o":
            plotar_mapa_producao()
        elif geoplot_submenu == "Exporta√ß√£o":
            plotar_mapa_exportacao()
        elif geoplot_submenu == "Consumo":
            plotar_mapa_consumo()

def plotar_evolucao_preco_interativo(dados, data_inicio, data_fim):
    data_inicio = pd.to_datetime(data_inicio)
    data_fim = pd.to_datetime(data_fim)
    dados_filtrados = dados[(dados['Data'] >= data_inicio) & (dados['Data'] <= data_fim)]
    fig = px.line(dados_filtrados, x='Data', y='Preco_petroleo_bruto_Brent_FOB', title='Evolu√ß√£o do Pre√ßo do Petr√≥leo Brent')
    fig.update_xaxes(title_text='Data')
    fig.update_yaxes(title_text='Pre√ßo (USD)')
    st.plotly_chart(fig)
    return dados_filtrados

def plotar_analise_tendencias(dados):
    st.subheader("An√°lise de Tend√™ncias")
    st.write("Explore as tend√™ncias nos pre√ßos do petr√≥leo Brent.")

    dados['Media_Movel_30'] = dados['Preco_petroleo_bruto_Brent_FOB'].rolling(window=30).mean()
    dados['Media_Movel_90'] = dados['Preco_petroleo_bruto_Brent_FOB'].rolling(window=90).mean()
    dados['Media_Movel_365'] = dados['Preco_petroleo_bruto_Brent_FOB'].rolling(window=365).mean()
    dados['Media_Geral'] = dados['Preco_petroleo_bruto_Brent_FOB'].mean()

    st.write("Selecione um intervalo de datas para visualizar a an√°lise de tend√™ncias.")
    data_min = dados['Data'].min().date()
    data_max = dados['Data'].max().date()

    data_inicio, data_fim = st.slider("Selecione o intervalo de datas", min_value=data_min, max_value=data_max, value=(data_min, data_max), format="DD/MM/YYYY")

    if data_inicio > data_fim:
        st.error("Data de in√≠cio n√£o pode ser maior que a data de fim.")
    else:
        dados_filtrados = dados[(dados['Data'] >= pd.to_datetime(data_inicio)) & (dados['Data'] <= pd.to_datetime(data_fim))]

        medias_moveis = st.multiselect('Selecione as m√©dias m√≥veis que deseja visualizar:',
                                       ['M√©dia M√≥vel 30 Dias', 'M√©dia M√≥vel 90 Dias', 'M√©dia M√≥vel 365 Dias', 'M√©dia Geral'],
                                       default=['M√©dia M√≥vel 30 Dias', 'M√©dia M√≥vel 90 Dias', 'M√©dia M√≥vel 365 Dias', 'M√©dia Geral'])

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=dados_filtrados['Data'], y=dados_filtrados['Preco_petroleo_bruto_Brent_FOB'], mode='lines', name='Pre√ßo do Brent (FOB)'))
        
        if 'M√©dia M√≥vel 30 Dias' in medias_moveis:
            fig.add_trace(go.Scatter(x=dados_filtrados['Data'], y=dados_filtrados['Media_Movel_30'], mode='lines', name='M√©dia M√≥vel 30 Dias'))
        
        if 'M√©dia M√≥vel 90 Dias' in medias_moveis:
            fig.add_trace(go.Scatter(x=dados_filtrados['Data'], y=dados_filtrados['Media_Movel_90'], mode='lines', name='M√©dia M√≥vel 90 Dias'))
        
        if 'M√©dia M√≥vel 365 Dias' in medias_moveis:
            fig.add_trace(go.Scatter(x=dados_filtrados['Data'], y=dados_filtrados['Media_Movel_365'], mode='lines', name='M√©dia M√≥vel 365 Dias'))
        
        if 'M√©dia Geral' in medias_moveis:
            fig.add_trace(go.Scatter(x=dados_filtrados['Data'], y=dados_filtrados['Media_Geral'], mode='lines', name='M√©dia Geral', line=dict(dash='dash')))

        fig.update_layout(title='An√°lise de Tend√™ncias nos Pre√ßos do Petr√≥leo Brent',
                          xaxis_title='Data',
                          yaxis_title='Pre√ßo (USD)')

        st.plotly_chart(fig)

        csv = dados_filtrados.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Baixar dados como CSV",
            data=csv,
            file_name='analise_tendencias_preco_petroleo_brent.csv',
            mime='text/csv',
        )

def plotar_impacto_covid(dados):
    st.subheader("Impacto da COVID-19")
    st.write("""
        A pandemia de COVID-19 teve um impacto profundo e significativo nos mercados globais, incluindo o mercado de petr√≥leo. 
        Durante a pandemia, a demanda por petr√≥leo caiu drasticamente devido ao lockdown global e √†s restri√ß√µes de viagem. 
        Isso resultou em uma queda acentuada nos pre√ßos do petr√≥leo em 2020. Com a recupera√ß√£o gradual da economia e o ajuste da produ√ß√£o pela OPEP+, 
        os pre√ßos come√ßaram a se recuperar no final de 2020 e ao longo de 2021.
    """)

    dados_covid = dados[(dados['Data'] >= '2019-01-01') & (dados['Data'] <= '2021-12-31')]
    
    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados_covid['Data'], y=dados_covid['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)',
                             line=dict(color='blue')))

    fig.add_shape(type="line",
                  x0='2020-03-11', y0=dados_covid['Preco_petroleo_bruto_Brent_FOB'].min(),
                  x1='2020-03-11', y1=dados_covid['Preco_petroleo_bruto_Brent_FOB'].max(),
                                    line=dict(color="red", width=2, dash="dash"))

    fig.add_annotation(x='2020-03-11', y=dados_covid['Preco_petroleo_bruto_Brent_FOB'].max(),
                       text="In√≠cio da Pandemia ",
                       showarrow=True, arrowhead=1)

    fig.add_trace(go.Scatter(
        x=[None], y=[None],
        mode='lines',
        line=dict(color='red', dash='dash'),
        showlegend=True,
        name='In√≠cio da Pandemia '
    ))

    fig.update_layout(title='Impacto da COVID-19 no Pre√ßo do Petr√≥leo Brent (2019-2021)',
                      xaxis_title='Data',
                      yaxis_title='Pre√ßo (USD)')
    st.plotly_chart(fig)

    csv = dados_covid.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='impacto_covid_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_comparacao_pre_pandemia(dados):
    st.subheader("Compara√ß√£o de Pre√ßos Antes, Durante e P√≥s-Pandemia")
    st.write("""
        Este gr√°fico compara os pre√ßos do petr√≥leo Brent em tr√™s per√≠odos distintos: antes da pandemia (2019), durante a pandemia (2020) e p√≥s-pandemia (2021). 
        Ele ajuda a visualizar como a pandemia afetou os pre√ßos e como eles se comportaram ap√≥s o fim das restri√ß√µes mais rigorosas.
    """)

    pre_covid_2019 = dados[(dados['Data'] >= '2019-01-01') & (dados['Data'] < '2020-01-01')]
    durante_covid_2020 = dados[(dados['Data'] >= '2020-01-01') & (dados['Data'] < '2021-01-01')]
    pos_covid_2021 = dados[(dados['Data'] >= '2021-01-01') & (dados['Data'] < '2022-01-01')]

    fig = go.Figure()

    fig.add_trace(go.Box(
        y=pre_covid_2019['Preco_petroleo_bruto_Brent_FOB'],
        name='Antes da Pandemia (2019)',
        marker_color='blue'
    ))

    fig.add_trace(go.Box(
        y=durante_covid_2020['Preco_petroleo_bruto_Brent_FOB'],
        name='Durante a Pandemia (2020)',
        marker_color='red'
    ))

    fig.add_trace(go.Box(
        y=pos_covid_2021['Preco_petroleo_bruto_Brent_FOB'],
        name='P√≥s Pandemia (2021)',
        marker_color='green'
    ))

    fig.update_layout(
        title='Compara√ß√£o de Pre√ßos do Petr√≥leo Brent Antes (2019), Durante (2020) e P√≥s Pandemia (2021)',
        yaxis_title='Pre√ßo (USD)',
        boxmode='group'
    )

    st.plotly_chart(fig)

def plotar_eventos_vacina(dados):
    st.subheader("Impacto de Eventos Espec√≠ficos Durante a Pandemia")
    st.write("""
        Durante a pandemia de COVID-19, v√°rios eventos espec√≠ficos tiveram um impacto significativo nos pre√ßos do petr√≥leo Brent. 
        Dois dos eventos mais marcantes foram o in√≠cio dos lockdowns em mar√ßo de 2020 e o in√≠cio da vacina√ß√£o em dezembro de 2020.

        **In√≠cio dos Lockdowns (Mar√ßo de 2020):**
        Em 11 de mar√ßo de 2020, a Organiza√ß√£o Mundial da Sa√∫de (OMS) declarou o COVID-19 como uma pandemia global. 
        Isso levou a uma s√©rie de lockdowns em v√°rios pa√≠ses ao redor do mundo, resultando em uma dr√°stica redu√ß√£o na demanda por petr√≥leo. 
        O gr√°fico a seguir mostra uma queda acentuada nos pre√ßos do petr√≥leo Brent imediatamente ap√≥s esse an√∫ncio, refletindo a incerteza e a contra√ß√£o econ√¥mica global.

        **In√≠cio da Vacina√ß√£o (Dezembro de 2020):**
        Com o desenvolvimento r√°pido das vacinas contra o COVID-19, a vacina√ß√£o em massa come√ßou em muitos pa√≠ses em dezembro de 2020. 
        Este evento marcou o in√≠cio de uma recupera√ß√£o econ√¥mica gradual, aumentando as esperan√ßas de um retorno √† normalidade. 
        O gr√°fico mostra uma recupera√ß√£o nos pre√ßos do petr√≥leo Brent √† medida que a confian√ßa dos investidores come√ßou a retornar com o progresso das campanhas de vacina√ß√£o.

        Este gr√°fico detalha as flutua√ß√µes nos pre√ßos do petr√≥leo Brent durante esses eventos cr√≠ticos, destacando a volatilidade do mercado em resposta √†s mudan√ßas globais.
    """)
    dados_eventos = dados[(dados['Data'] >= '2020-01-01') & (dados['Data'] <= '2021-12-31')]
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=dados_eventos['Data'], y=dados_eventos['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)', line=dict(color='blue')))
    
    fig.add_shape(type="line", x0='2020-03-11', y0=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].min(),
                  x1='2020-03-11', y1=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].max(), line=dict(color="red", width=2, dash="dash"))
    fig.add_annotation(x='2020-03-11', y=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].max(),
                       text="In√≠cio da Pandemia", showarrow=True, arrowhead=1)
    
    fig.add_shape(type="line", x0='2020-12-14', y0=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].min(),
                  x1='2020-12-14', y1=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].max(), line=dict(color="green", width=2, dash="dash"))
    fig.add_annotation(x='2020-12-14', y=dados_eventos['Preco_petroleo_bruto_Brent_FOB'].max(),
                       text="In√≠cio da Vacina√ß√£o", showarrow=True, arrowhead=1)

    fig.update_layout(title='Impacto das vacinas Durante a Pandemia no Pre√ßo do Petr√≥leo Brent (2020-2021)',
                      xaxis_title='Data',
                      yaxis_title='Pre√ßo (USD)')
    fig.add_trace(go.Scatter(x=[None], y=[None], mode='lines', line=dict(color='red', dash='dash'), showlegend=True, name='In√≠cio da Pandemia'))
    fig.add_trace(go.Scatter(x=[None], y=[None], mode='lines', line=dict(color='green', dash='dash'), showlegend=True, name='In√≠cio da Vacina√ß√£o'))
    st.plotly_chart(fig)

def plotar_mapa_producao():
    produtores = pd.DataFrame({
        'Pa√≠s': ['United States', 'Russia', 'Saudi Arabia', 'Canada', 'Iraq', 'China', 'United Arab Emirates', 'Brazil', 'Iran', 'Kuwait'],
        'Produ√ß√£o (milh√µes de barris/dia)': [11.307, 9.865, 9.264, 4.201, 4.102, 3.888, 3.138, 2.939, 2.665, 2.625],
        'C√≥digo Pa√≠s': ['USA', 'RUS', 'SAU', 'CAN', 'IRQ', 'CHN', 'ARE', 'BRA', 'IRN', 'KWT']
    })

    fig = px.choropleth(produtores, 
                        locations='C√≥digo Pa√≠s', 
                        color='Produ√ß√£o (milh√µes de barris/dia)',
                        hover_name='Pa√≠s', 
                        title='Principais Produtores de Petr√≥leo (dados de 2020)',
                        color_continuous_scale=px.colors.sequential.Plasma,
                        projection='natural earth')

    fig.update_geos(showland=True, landcolor="lightgray",
                    showcountries=True, countrycolor="Black")

    st.plotly_chart(fig)

    st.write("### Legenda")
    st.table(produtores[['Pa√≠s', 'Produ√ß√£o (milh√µes de barris/dia)','C√≥digo Pa√≠s']])

def plotar_mapa_exportacao():
    exportadores = pd.DataFrame({
        'Pa√≠s': ['Saudi Arabia', 'Russia', 'Iraq', 'United States', 'Canada', 'United Arab Emirates', 'Kuwait', 'Nigeria', 'Qatar', 'Angola'],
        'Exporta√ß√£o (milh√µes de barris/dia)': [10.600, 5.225, 3.800, 3.770, 3.596, 2.296, 2.050, 1.979, 1.477, 1.420],
        'C√≥digo Pa√≠s': ['SAU', 'RUS', 'IRQ', 'USA', 'CAN', 'ARE', 'KWT', 'NGA', 'QAT', 'AGO']
    })

    fig = px.choropleth(exportadores, 
                        locations='C√≥digo Pa√≠s', 
                        color='Exporta√ß√£o (milh√µes de barris/dia)',
                        hover_name='Pa√≠s', 
                        title='Principais Exportadores de Petr√≥leo (dados de 2018)',
                        color_continuous_scale=px.colors.sequential.Plasma,
                        projection='natural earth')

    fig.update_geos(showland=True, landcolor="lightgray",
                    showcountries=True, countrycolor="Black")

    st.plotly_chart(fig)

    st.write("### Legenda")
    st.table(exportadores[['Pa√≠s', 'Exporta√ß√£o (milh√µes de barris/dia)']])

def plotar_mapa_consumo():
    consumidores = pd.DataFrame({
        'Pa√≠s': ['United States', 'China', 'India', 'Japan', 'Saudi Arabia', 'Russia', 'South Korea', 'Canada', 'Brazil', 'Germany'],
        'Consumo (milh√µes de barris/dia)': [19.400, 14.056, 5.271, 3.812, 3.788, 3.317, 2.760, 2.403, 2.398, 2.281],
        'C√≥digo Pa√≠s': ['USA', 'CHN', 'IND', 'JPN', 'SAU', 'RUS', 'KOR', 'CAN', 'BRA', 'DEU']
    })

    fig = px.choropleth(consumidores, 
                        locations='C√≥digo Pa√≠s', 
                        color='Consumo (milh√µes de barris/dia)',
                        hover_name='Pa√≠s', 
                        title='Principais Consumidores de Petr√≥leo (dados de 2019)',
                        color_continuous_scale=px.colors.sequential.Plasma,
                        projection='natural earth')

    fig.update_geos(showland=True, landcolor="lightgray",
                    showcountries=True, countrycolor="Black")

    st.plotly_chart(fig)

    st.write("### Legenda")
    st.table(consumidores[['Pa√≠s', 'Consumo (milh√µes de barris/dia)']])

def plotar_falencia_lehman_brothers(dados):
    st.subheader("Fal√™ncia do Lehman Brothers")
    st.write("""
        Em 15 de setembro de 2008, o Lehman Brothers, um dos maiores bancos de investimento dos Estados Unidos, declarou fal√™ncia. 
        Este evento √© frequentemente visto como o auge da crise financeira global de 2008. A fal√™ncia do Lehman Brothers teve um impacto significativo 
        nos mercados financeiros globais, incluindo o mercado de petr√≥leo.
    """)

    dados_lehman = dados[(dados['Data'] >= '2007-01-01') & (dados['Data'] <= '2009-12-31')]
    
    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados_lehman['Data'], y=dados_lehman['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)',
                             line=dict(color='blue')))

    fig.add_shape(type="line",
                  x0='2008-09-15', y0=dados_lehman['Preco_petroleo_bruto_Brent_FOB'].min(),
                  x1='2008-09-15', y1=dados_lehman['Preco_petroleo_bruto_Brent_FOB'].max(),
                  line=dict(color="red", width=2, dash="dash"))

    fig.add_annotation(x='2008-09-15', y=dados_lehman['Preco_petroleo_bruto_Brent_FOB'].max(),
                       text="Fal√™ncia do Lehman Brothers",
                       showarrow=True, arrowhead=1,
                       yshift=10)

    fig.update_layout(
        title='Impacto da Fal√™ncia do Lehman Brothers no Pre√ßo do Petr√≥leo Brent (2007-2009)',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (USD)'
    )

    st.plotly_chart(fig)

    csv = dados_lehman.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados da Fal√™ncia do Lehman Brothers como CSV",
        data=csv,
        file_name='falencia_lehman_brothers_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_aprovacao_tarp(dados):
    st.subheader("Aprova√ß√£o do TARP")
    st.write("""
        Em 3 de outubro de 2008, o governo dos Estados Unidos aprovou o Programa de Al√≠vio de Ativos Problem√°ticos (TARP) para estabilizar o sistema financeiro. 
        O TARP autorizou o Departamento do Tesouro a gastar at√© 700 bilh√µes de d√≥lares para comprar ativos t√≥xicos e fornecer capital a institui√ß√µes financeiras. 
        Esta medida teve um impacto significativo nos mercados financeiros, incluindo o mercado de petr√≥leo.
    """)

    dados_tarp = dados[(dados['Data'] >= '2007-01-01') & (dados['Data'] <= '2009-12-31')]
    
    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados_tarp['Data'], y=dados_tarp['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)',
                             line=dict(color='blue')))

    fig.add_shape(type="line",
                  x0='2008-10-03', y0=dados_tarp['Preco_petroleo_bruto_Brent_FOB'].min(),
                  x1='2008-10-03', y1=dados_tarp['Preco_petroleo_bruto_Brent_FOB'].max(),
                  line=dict(color="green", width=2, dash="dash"))

    fig.add_annotation(x='2008-10-03', y=dados_tarp['Preco_petroleo_bruto_Brent_FOB'].max(),
                       text="Aprova√ß√£o do TARP",
                       showarrow=True, arrowhead=1,
                       yshift=-10)

    fig.update_layout(
        title='Impacto da Aprova√ß√£o do TARP no Pre√ßo do Petr√≥leo Brent (2007-2009)',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (USD)'
    )
    st.plotly_chart(fig)

    csv = dados_tarp.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados da Aprova√ß√£o do TARP como CSV",
        data=csv,
        file_name='aprovacao_tarp_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_volatilidade(dados):
    st.subheader("Volatilidade dos Pre√ßos do Petr√≥leo")
    st.write("""
        A volatilidade dos pre√ßos do petr√≥leo aumentou significativamente durante a Crise Financeira de 2008.
        Isso reflete a incerteza e o p√¢nico no mercado √† medida que os pre√ßos do petr√≥leo flutuavam drasticamente.
    """)

    dados_volatilidade = dados[(dados['Data'] >= '2007-01-01') & (dados['Data'] <= '2009-12-31')]
    dados_volatilidade['Retornos Di√°rios'] = dados_volatilidade['Preco_petroleo_bruto_Brent_FOB'].pct_change()
    dados_volatilidade['Volatilidade'] = dados_volatilidade['Retornos Di√°rios'].rolling(window=30).std()

    fig = px.line(dados_volatilidade, x='Data', y='Volatilidade', title='Volatilidade dos Pre√ßos do Petr√≥leo Brent (2007-2009)')
    fig.update_xaxes(title_text='Data')
    fig.update_yaxes(title_text='Volatilidade (30 dias)')
    st.plotly_chart(fig)

    csv = dados_volatilidade[['Data', 'Volatilidade']].dropna().to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados de Volatilidade como CSV",
        data=csv,
        file_name='volatilidade_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_comparacao_prepos_primavera_arabe(dados):
    st.subheader("Compara√ß√£o de Pre√ßos Antes e Depois da Primavera √Årabe")
    st.write("""
        Este gr√°fico compara os pre√ßos do petr√≥leo Brent antes, durante e depois da Primavera √Årabe, destacando o impacto dos eventos nos pre√ßos.
    """)

    pre_arabe = dados[(dados['Data'] >= '2008-01-01') & (dados['Data'] < '2010-01-01')]
    durante_arabe = dados[(dados['Data'] >= '2010-01-01') & (dados['Data'] < '2012-01-01')]
    pos_arabe = dados[(dados['Data'] >= '2012-01-01') & (dados['Data'] <= '2014-12-31')]

    fig = go.Figure()

    fig.add_trace(go.Box(y=pre_arabe['Preco_petroleo_bruto_Brent_FOB'], name='Antes da Primavera √Årabe', marker_color='blue'))
    fig.add_trace(go.Box(y=durante_arabe['Preco_petroleo_bruto_Brent_FOB'], name='Durante a Primavera √Årabe', marker_color='red'))
    fig.add_trace(go.Box(y=pos_arabe['Preco_petroleo_bruto_Brent_FOB'], name='Ap√≥s a Primavera √Årabe', marker_color='green'))

    fig.update_layout(
        title='Compara√ß√£o de Pre√ßos do Petr√≥leo Brent Antes, Durante e Ap√≥s a Primavera √Årabe',
        yaxis_title='Pre√ßo (USD)',
        boxmode='group'
    )

    st.plotly_chart(fig)

    dados_comparacao = pd.concat([pre_arabe, durante_arabe, pos_arabe])
    csv = dados_comparacao.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='comparacao_prepos_primavera_arabe.csv',
        mime='text/csv',
    )

def plotar_primavera_arabe(dados):
    st.markdown("""
    <div class="section-container">
        <h2>Impacto da Primavera √Årabe no Pre√ßo do Petr√≥leo Brent</h2>
        <p>
            A Primavera √Årabe, que come√ßou em 2010, teve impactos significativos nas economias do Oriente M√©dio e Norte da √Åfrica. Esses eventos aumentaram a incerteza global sobre a oferta de petr√≥leo, elevando os pre√ßos de aproximadamente 90 para 125 d√≥lares por barril em 2011.
        </p>
        <p>
            A instabilidade pol√≠tica resultou em:
        </p>
        <ul>
            <li>Interrup√ß√£o da produ√ß√£o na L√≠bia e I√©men, reduzindo drasticamente a capacidade de exporta√ß√£o.</li>
            <li>Reajustes nas pol√≠ticas energ√©ticas, com pa√≠ses como os EUA aumentando a produ√ß√£o dom√©stica.</li>
            <li>Mudan√ßas no poder geopol√≠tico, afetando a capacidade da OPEP de coordenar pol√≠ticas de produ√ß√£o.</li>
            <li>Oportunidades para novos produtores, como Ar√°bia Saudita e R√∫ssia, aumentarem sua influ√™ncia.</li>
            <li>Maior investimento em energias renov√°veis e tecnologias de efici√™ncia energ√©tica.</li>
            <li>Impactos econ√¥micos globais, como infla√ß√£o e aumento nos custos de transporte e produ√ß√£o.</li>
        </ul>
        <p>
            Vamos analisar como esses eventos afetaram os pre√ßos do petr√≥leo Brent durante esse per√≠odo.
        </p>
    </div>
    """, unsafe_allow_html=True)

    dados_arabe = dados[(dados['Data'] >= '2010-01-01') & (dados['Data'] <= '2013-12-31')]

    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados_arabe['Data'], y=dados_arabe['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)', line=dict(color='blue')))

    eventos = [
        {'data': '2010-12-17', 'evento': 'In√≠cio dos Protestos na Tun√≠sia', 'cor': 'red'},
        {'data': '2011-02-11', 'evento': 'Queda do Governo no Egito', 'cor': 'green'},
        {'data': '2011-10-20', 'evento': 'Queda do Governo na L√≠bia', 'cor': 'purple'}
    ]

    for evento in eventos:
        fig.add_shape(
            type="line",
            x0=evento['data'], y0=dados_arabe['Preco_petroleo_bruto_Brent_FOB'].min(),
            x1=evento['data'], y1=dados_arabe['Preco_petroleo_bruto_Brent_FOB'].max(),
            line=dict(color=evento['cor'], width=2, dash="dash")
        )
        fig.add_annotation(
            x=evento['data'], y=dados_arabe['Preco_petroleo_bruto_Brent_FOB'].max(),
            text=evento['evento'], showarrow=True, arrowhead=1,
            font=dict(color=evento['cor'], size=12),
            textangle=-65
        )

    for evento in eventos:
        fig.add_trace(go.Scatter(
            x=[None], y=[None],
            mode='lines',
            line=dict(color=evento['cor'], dash='dash'),
            showlegend=True,
            name=evento['evento']
        ))

    fig.update_layout(
        title='Impacto da Primavera √Årabe no Pre√ßo do Petr√≥leo Brent',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (USD)',
        height=600,
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.3,
            xanchor="center",
            x=0.5,
            itemwidth=50,  
            font=dict(size=10)
        ),
        margin=dict(b=100)  
    )

    st.plotly_chart(fig)

    csv = dados_arabe.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='impacto_primavera_arabe_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_dispersao_retornos(dados):
    st.subheader("Dispers√£o dos Retornos Di√°rios do Pre√ßo do Petr√≥leo Brent (2009-2014)")
    st.write("""
        Este gr√°fico mostra a dispers√£o dos retornos di√°rios do pre√ßo do petr√≥leo Brent, destacando a volatilidade durante o per√≠odo de 2009 a 2014.
    """)

    dados_filtrados = dados[(dados['Data'] >= '2009-01-01') & (dados['Data'] <= '2014-12-31')]
    dados_filtrados['Retornos_Diarios'] = dados_filtrados['Preco_petroleo_bruto_Brent_FOB'].pct_change()

    fig = px.scatter(dados_filtrados, x='Data', y='Retornos_Diarios', title='Dispers√£o dos Retornos Di√°rios do Pre√ßo do Petr√≥leo Brent (2009-2014)', color='Retornos_Diarios', labels={'Retornos_Diarios': 'Retornos Di√°rios'})
    fig.update_layout(xaxis_title='Data', yaxis_title='Retornos Di√°rios')
    st.plotly_chart(fig)

    csv = dados_filtrados[['Data', 'Retornos_Diarios']].dropna().to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='dispersao_retornos_2009_2014.csv',
        mime='text/csv',
    )

def plotar_guerra_golfo(dados):
    st.subheader("Impacto da Guerra do Golfo no Pre√ßo do Petr√≥leo Brent")
    st.write("""
        A Guerra do Golfo, ocorrida entre 1990 e 1991, foi um conflito de curta dura√ß√£o, mas de grande impacto global, especialmente no mercado de petr√≥leo. Este gr√°fico ilustra a evolu√ß√£o dos pre√ßos do petr√≥leo Brent durante a guerra, destacando eventos cruciais que influenciaram esses pre√ßos. Vamos explorar como esses eventos moldaram o mercado de petr√≥leo e as economias globais.
    """)

    st.write("""
        **Contexto Hist√≥rico:**

        1. **Invas√£o do Kuwait (2 de agosto de 1990):**
        
        Em 2 de agosto de 1990, o Iraque, liderado por Saddam Hussein, invadiu o Kuwait, um dos maiores produtores de petr√≥leo do mundo. Esta invas√£o n√£o s√≥ provocou um aumento imediato nos pre√ßos do petr√≥leo devido ao medo de uma interrup√ß√£o significativa na oferta global, mas tamb√©m gerou uma rea√ß√£o internacional que culminaria em um conflito militar.

        2. **In√≠cio da Opera√ß√£o Tempestade no Deserto (17 de janeiro de 1991):**
        
        A resposta internacional veio na forma de uma coaliz√£o liderada pelos Estados Unidos, que iniciou a Opera√ß√£o Tempestade no Deserto em 17 de janeiro de 1991. Esta opera√ß√£o tinha como objetivo liberar o Kuwait e proteger os interesses petrol√≠feros na regi√£o. Durante este per√≠odo, a incerteza continuou a manter os pre√ßos do petr√≥leo elevados.

        3. **Fim da Guerra do Golfo (28 de fevereiro de 1991):**
        
        A guerra terminou oficialmente em 28 de fevereiro de 1991, quando as for√ßas da coaliz√£o declararam a liberta√ß√£o do Kuwait. Com o fim do conflito, houve uma expectativa de estabiliza√ß√£o na produ√ß√£o e fornecimento de petr√≥leo, o que levou a uma diminui√ß√£o gradual nos pre√ßos.
    """)

    dados_golfo = dados[(dados['Data'] >= '1990-01-01') & (dados['Data'] <= '1991-12-31')]

    fig = go.Figure()

    fig.add_trace(go.Scatter(x=dados_golfo['Data'], y=dados_golfo['Preco_petroleo_bruto_Brent_FOB'],
                             mode='lines', name='Pre√ßo do Brent (FOB)', line=dict(color='blue')))

    eventos = [
        {'data': '1990-08-02', 'evento': 'Invas√£o do Kuwait', 'cor': 'red'},
        {'data': '1991-01-17', 'evento': 'In√≠cio da Opera√ß√£o Tempestade no Deserto', 'cor': 'green'},
        {'data': '1991-02-28', 'evento': 'Fim da Guerra do Golfo', 'cor': 'purple'}
    ]

    for evento in eventos:
        fig.add_shape(
            type="line",
            x0=evento['data'], y0=dados_golfo['Preco_petroleo_bruto_Brent_FOB'].min(),
            x1=evento['data'], y1=dados_golfo['Preco_petroleo_bruto_Brent_FOB'].max(),
            line=dict(color=evento['cor'], width=2, dash="dash")
        )
        fig.add_annotation(
            x=evento['data'], y=dados_golfo['Preco_petroleo_bruto_Brent_FOB'].max(),
            ax=0, ay=-30,
            text=evento['evento'], showarrow=True, arrowhead=2,
            arrowcolor=evento['cor'], arrowsize=1, arrowwidth=2,
            font=dict(color=evento['cor'], size=12),
            textangle=-45
        )

    for evento in eventos:
        fig.add_trace(go.Scatter(
            x=[None], y=[None],
            mode='lines',
            line=dict(color=evento['cor'], dash='dash'),
            showlegend=True,
            name=evento['evento']
        ))

    fig.update_layout(
        title='Impacto da Guerra do Golfo no Pre√ßo do Petr√≥leo Brent',
        xaxis_title='Data',
        yaxis_title='Pre√ßo (USD)',
        height=600,
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.3,
            xanchor="center",
            x=0.5,
            itemwidth=50, 
            font=dict(size=10)
        ),
        margin=dict(b=100)  
    )

    st.plotly_chart(fig)

    csv = dados_golfo.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='impacto_guerra_golfo_preco_petroleo_brent.csv',
        mime='text/csv',
    )

def plotar_volatilidade_guerra_golfo(dados):
    st.subheader("Volatilidade dos Pre√ßos do Petr√≥leo Durante a Guerra do Golfo")
    st.write("""
        Este gr√°fico mostra a volatilidade dos pre√ßos do petr√≥leo Brent durante a Guerra do Golfo.
    """)

    dados_golfo = dados[(dados['Data'] >= '1990-01-01') & (dados['Data'] <= '1991-12-31')]
    dados_golfo['Retornos_Diarios'] = dados_golfo['Preco_petroleo_bruto_Brent_FOB'].pct_change()
    dados_golfo['Volatilidade'] = dados_golfo['Retornos_Diarios'].rolling(window=30).std()

    fig = px.line(dados_golfo, x='Data', y='Volatilidade', title='Volatilidade dos Pre√ßos do Petr√≥leo Brent Durante a Guerra do Golfo')
    fig.update_xaxes(title_text='Data')
    fig.update_yaxes(title_text='Volatilidade (30 dias)')
    st.plotly_chart(fig)

    csv = dados_golfo[['Data', 'Volatilidade']].dropna().to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar dados como CSV",
        data=csv,
        file_name='volatilidade_guerra_golfo.csv',
        mime='text/csv',
    )

def quedas(dados):
    st.title("An√°lise do Pre√ßo do Petr√≥leo Brent")
    submenu = option_menu(
        menu_title="",  
        options=["Covid-19", "Crise Financeira 2008"],
        icons=["virus", "dropbox"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal"
    )

    if submenu == "Covid-19":
        plotar_impacto_covid(dados)
        plotar_eventos_vacina(dados)
        plotar_comparacao_pre_pandemia(dados)
        
    elif submenu == "Crise Financeira 2008":
        st.title("Crise Financeira 2008")
        plotar_falencia_lehman_brothers(dados)
        plotar_aprovacao_tarp(dados)
        plotar_volatilidade(dados)

def aumentos(dados):
    st.title("An√°lise do Pre√ßo do Petr√≥leo Brent")
    submenu = option_menu(
        menu_title="",  
        options=["Primavera √Årabe","Guerra do Golfo"],
        icons=["globe", "peace"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal"
    )

    if submenu == "Primavera √Årabe":
        st.title("Primavera √Årabe")
        plotar_primavera_arabe(dados)
        plotar_comparacao_prepos_primavera_arabe(dados)
        plotar_dispersao_retornos(dados)
        
    elif submenu == "Guerra do Golfo":
        st.title("Guerra do Golfo")
        plotar_guerra_golfo(dados)
        plotar_volatilidade_guerra_golfo(dados)


def criar_grafico_previsoes():
    st.subheader("Previs√£o de Pre√ßos do Petr√≥leo Brent")

    st.markdown("""
<h2>An√°lise do Pre√ßo Atual e Previs√£o do Petr√≥leo Brent</h2>
<p style="text-align: justify;">
Atualmente, o pre√ßo do petr√≥leo Brent est√° em um n√≠vel significativo, refletindo uma combina√ß√£o de fatores econ√¥micos, geopol√≠ticos e ambientais que influenciam o mercado global de energia. 
</p>
<p style="text-align: justify;">
Observando o gr√°fico de pre√ßos do petr√≥leo Brent, notamos uma trajet√≥ria que revela per√≠odos de alta volatilidade. Eventos como a pandemia de COVID-19, conflitos geopol√≠ticos e mudan√ßas nas pol√≠ticas da OPEP (Organiza√ß√£o dos Pa√≠ses Exportadores de Petr√≥leo) t√™m desempenhado pap√©is significativos nas flutua√ß√µes dos pre√ßos. Por exemplo, a pandemia resultou em uma dr√°stica queda na demanda e, consequentemente, nos pre√ßos do petr√≥leo, enquanto a recupera√ß√£o econ√¥mica subsequente levou a um aumento nos pre√ßos.
</p>
<p style="text-align: justify;">
As previs√µes de pre√ßos do petr√≥leo Brent at√© maio de 2025, indicadas pela linha vermelha no gr√°fico, oferecem uma vis√£o prospectiva baseada em modelos de machine learning. Esta previs√£o considera dados hist√≥ricos e padr√µes identificados no comportamento do mercado, projetando poss√≠veis movimentos futuros.
</p>
""", unsafe_allow_html=True)

    dados = pd.read_csv('Filtered_DataFrame_2020-2025.csv')
    dados['Data'] = pd.to_datetime(dados['Data'])

    dados_filtrados = dados[(dados['Data'] >= '2020-01-01') & (dados['Data'] <= '2025-05-20')]
    dados_historicos = dados_filtrados[dados_filtrados['Data'] <= '2024-05-20']
    dados_previsao = dados_filtrados[dados_filtrados['Data'] > '2024-05-20']
    data_atual = datetime.now()
    data_str = data_atual.strftime('%Y-%m-%d')
    valor_previsto = dados_previsao[dados_previsao['Data'] == data_str]['Preco'].values

    if len(valor_previsto) > 0:
        valor_previsto = valor_previsto[0]
    else:
        valor_previsto = "N/A"

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=dados_historicos['Data'], y=dados_historicos['Preco'], mode='lines', name='Hist√≥rico', line=dict(color='blue')))
    fig.add_trace(go.Scatter(x=dados_previsao['Data'], y=dados_previsao['Preco'], mode='lines', name='Previs√£o', line=dict(color='red')))

    if not dados_historicos.empty and not dados_previsao.empty:
        fig.add_trace(go.Scatter(x=[dados_historicos['Data'].iloc[-1], dados_previsao['Data'].iloc[0]],
                                 y=[dados_historicos['Preco'].iloc[-1], dados_previsao['Preco'].iloc[0]],
                                 mode='lines', line=dict(color='blue'), showlegend=False))

    fig.update_layout(title='Previs√£o de Pre√ßos do Petr√≥leo Brent (2020-2025)',
                      xaxis_title='Data',
                      yaxis_title='Pre√ßo (FOB)')

    st.plotly_chart(fig)
    preco_atual = obter_preco_atual()
    
    st.markdown("""
    <p style="text-align: justify;">
    Utilizamos t√©cnicas de web scraping para coletar os dados mais recentes do pre√ßo atual do petr√≥leo Brent. Em seguida, comparamos esses dados com as previs√µes geradas pelo nosso modelo.
    </p>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    col1.metric(label="Pre√ßo Atual do Petr√≥leo Brent (USD)", value=preco_atual)
    col2.metric(label="Valor Previsto no Gr√°fico (USD)", value=valor_previsto)

    st.subheader("Prophet")

    st.markdown("""
    <p style="text-align: justify;">
    Utilizamos um modelo Prophet tamb√©m, mas devido a alguns erros de compatibilidade entre a biblioteca Prophet e a biblioteca NumPy, n√£o conseguimos utilizar esses modelos diretamente no Streamlit. No entanto, todas as an√°lises e previs√µes realizadas com o Prophet est√£o dispon√≠veis no nosso notebook. Voc√™ pode baixar o arquivo do notebook clicando no bot√£o abaixo.
    </p>
    """, unsafe_allow_html=True)

    with open("ml_prophet.ipynb", "rb") as file:
        st.download_button(label="Baixar Notebook", data=file, file_name="notebook_projetos_analises.ipynb")

  
def main():
    st.set_page_config(page_title="An√°lise do Pre√ßo do Petr√≥leo Brent", layout="wide")
    caminho_arquivo = 'petroleo.xlsx'
    dados = carregar_dados(caminho_arquivo)
    with st.sidebar:
        selecionado = option_menu(
            menu_title="Menu Principal",  
            options=["Introdu√ß√£o", "Dados Brutos", "Quedas", "Aumentos", "Not√≠cias", "ML", "Conclus√£o"],  
            icons=["info-circle", "database", "arrow-down", "arrow-up", "newspaper", "robot", "check"],  
            menu_icon="cast",  
            default_index=0,  
        )

    if selecionado == "Introdu√ß√£o":
        introducao(dados)
    elif selecionado == "Dados Brutos":
        exibir(dados)
    elif selecionado == "Quedas":
        quedas(dados)
    elif selecionado == "Aumentos":
        aumentos(dados)
    elif selecionado == "Not√≠cias":
        st.subheader("Not√≠cias Relacionadas ao Petr√≥leo")
        noticias = buscar_noticias(NEWS_API_KEY)
        if noticias:
            for noticia in noticias:
                st.write(f"### {noticia['title']}")
                st.write(f"**Fonte**: {noticia['source']['name']}")
                st.write(noticia['description'])
                st.write(f"[Leia mais]({noticia['url']})")
        else:
            st.error("N√£o foi poss√≠vel buscar as not√≠cias. Verifique sua chave de API.")
    elif selecionado == "ML":
        criar_grafico_previsoes()
    elif selecionado == "Conclus√£o":
        conclusao()
   
if __name__ == "__main__":
    main()
